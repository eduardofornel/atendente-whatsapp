import { Client, LocalAuth, Message, Chat, Contact, MessageMedia } from 'whatsapp-web.js';
import qrcode from 'qrcode-terminal';
import path from 'path';
import fs from 'fs';

// ---------- ESTADOS ----------
type ChatMode =
  | 'normal'
  | 'aguardando_opcao'
  | 'aguardando_plano'
  | 'confirma_iniciante'
  | 'confirma_lutador'
  | 'confirma_campeao';

const chatState: Map<string, ChatMode> = new Map();

// ---------- CLIENT ----------
const client = new Client({
  authStrategy: new LocalAuth(),
  puppeteer: {
    headless: true,
    args: ['--no-sandbox', '--disable-setuid-sandbox'],
    // Se estiver usando puppeteer-core + Chrome do sistema, defina:
    // executablePath: '/usr/bin/google-chrome-stable'
  }
});

// ---------- HELPERS ----------
const delay = (ms: number): Promise<void> => new Promise(res => setTimeout(res, ms));

const PAGAMENTOS =
  `*Pagamentos*:\n` +
  `Todos os pagamentos devem ser feitos para:\n` +
  `CNPJ: 58.656.721/0001-34\n` +
  `Titular: Jo√£o Pedro Alves Santana (Banco Sicred)\n\n` +
  `Se quiser ver as op√ß√µes novamente √© s√≥ digitar "menu"üòâ`;

const isAffirmative = (t: string) =>
  /\b(sim|s|quero|claro|ok|blz|beleza|bora|vamos|perfeito|top|quero sim|yes|yep)\b/i.test(t);

const isNegative = (t: string) =>
  /\b(n[√£a]o|nao|n|agora n[√£a]o|depois|prefiro n[√£a]o|negativo)\b/i.test(t);

async function sendHorarios(chat: Chat) {
  // IMPORTANTE: garanta que o horarios.pdf esteja UMA pasta acima do dist/
  // Ex.: projeto/
  //  ‚îú‚îÄ src/
  //  ‚îú‚îÄ dist/
  //  ‚îî‚îÄ horarios.pdf
  const mediaPath = path.join(__dirname, '..', 'horarios.pdf');
  if (fs.existsSync(mediaPath)) {
    const media = MessageMedia.fromFilePath(mediaPath);
    await chat.sendMessage('*Segue a planilha de hor√°rios em PDF:*');
    await chat.sendMessage(media);
  } else {
    await chat.sendMessage('‚ö†Ô∏è Arquivo de hor√°rios n√£o encontrado no servidor.');
  }
}

async function backToMenu(msg: Message) {
  await msg.reply('Sem problema! Voltei para o menu pra voc√™ üëç');
  await sendMenu(msg);
  chatState.set(msg.from, 'aguardando_opcao');
}

// ---------- EVENTOS ----------
client.on('qr', (qr: string) => {
  console.log('QR recebido, escaneie para autenticar:');
  qrcode.generate(qr, { small: true });
});

client.on('ready', () => {
  console.log('Rob√¥ pronto para funcionar');
});

client.on('message', async (msg: Message) => {
  // Somente em chats privados
  if (!msg.from.endsWith('@c.us')) return;

  const chatId = msg.from;
  const text = msg.body.trim();
  const lower = text.toLowerCase();
  const estadoAtual = chatState.get(chatId) ?? 'normal';
  const chat: Chat = await msg.getChat();

  // /menu a qualquer momento
  if (/^(menu)$/.test(lower)) {
    await sendMenu(msg);
    chatState.set(chatId, 'aguardando_opcao');
    return;
  }

  // -------- CONFIRMA√á√ïES POR PLANO --------
  if (estadoAtual === 'confirma_iniciante') {
    if (isAffirmative(lower)) {
      await chat.sendMessage(
        'Boa decis√£o! üéØ A *aula experimental* √© a melhor forma de sentir o ritmo e conhecer os professores. ' +
        'D√° pra ajustar a intensidade, tirar d√∫vidas e achar o melhor hor√°rio pra voc√™.\n\nVou te mandar a planilha de hor√°rios:'
      );
      await sendHorarios(chat);
      await chat.sendMessage(PAGAMENTOS);
      await chat.markUnread();
      chatState.set(chatId, 'normal');
      return;
    }
    if (isNegative(lower)) {
      await chat.sendMessage(PAGAMENTOS);
      await chat.markUnread();
      await backToMenu(msg);
      return;
    }
    await msg.reply('Responde com *sim* ou *n√£o*, por favor. (ou digite *menu* para voltar)');
    return;
  }

  if (estadoAtual === 'confirma_lutador') {
    if (isAffirmative(lower)) {
      await sendHorarios(chat);
      await chat.sendMessage(PAGAMENTOS);
      await chat.markUnread();
      chatState.set(chatId, 'normal');
      return;
    }
    if (isNegative(lower)) {
      await chat.sendMessage(PAGAMENTOS);
      await chat.markUnread();
      await backToMenu(msg);
      return;
    }
    await msg.reply('Responde com *sim* ou *n√£o*, por favor. (ou digite *menu* para voltar)');
    return;
  }

  if (estadoAtual === 'confirma_campeao') {
    if (isAffirmative(lower)) {
      await sendHorarios(chat);
      await chat.sendMessage(PAGAMENTOS);
      await chat.markUnread();
      chatState.set(chatId, 'normal');
      return;
    }
    if (isNegative(lower)) {
      await chat.sendMessage(PAGAMENTOS);
      await chat.markUnread();
      await backToMenu(msg);
      return;
    }
    await msg.reply('Responde com *sim* ou *n√£o*, por favor. (ou digite *menu* para voltar)');
    return;
  }

  // -------- FLUXO DE ESCOLHA DO PLANO (NOMES) --------
  if (estadoAtual === 'aguardando_plano') {
    if (/(iniciante)/i.test(lower)) {
      await msg.reply('Curtiu o *Iniciante*. Quer marcar uma *aula experimental*?');
      chatState.set(chatId, 'confirma_iniciante');
      return;
    }
    if (/(lutador)/i.test(lower)) {
      await msg.reply('Show! Plano *Lutador*. Quer que eu j√° te mande os *hor√°rios*?');
      chatState.set(chatId, 'confirma_lutador');
      return;
    }
    if (/(campe(√£|a)o|campeao)/i.test(lower)) {
      await msg.reply('Top! Plano *Campe√£o*. Quer que eu te mande a *planilha de hor√°rios*?');
      chatState.set(chatId, 'confirma_campeao');
      return;
    }

    await msg.reply('N√£o entendi ü§î. Diga o *nome* de um plano (Iniciante, Lutador, Campe√£o) ou digite *menu*.');
    return;
  }

  // -------- FLUXO DE ESCOLHA DO MENU (N√öMEROS) --------
  if (estadoAtual === 'aguardando_opcao') {
    if (/^[0-5]$/.test(text)) {
      await handleMenuOption(msg, text); // esta fun√ß√£o tamb√©m ajusta o estado
    } else {
      await msg.reply('Por favor, digite um n√∫mero de 0 a 5 ou *menu* para ver o menu.');
    }
    return;
  }

  // -------- SAUDA√á√ÉO INICIAL --------
  if (/^(oi|ol√°|ola|dia|tarde|noite|jonny|jhony|jony|jhonny)$/.test(lower)) {
    await sendWelcomeMenu(msg);
    chatState.set(chatId, 'aguardando_opcao');
    return;
  }
});

// ---------- MENSAGENS ----------
async function sendWelcomeMenu(msg: Message): Promise<void> {
  const chat: Chat = await msg.getChat();
  const contact: Contact = await msg.getContact();
  const nome = contact.pushname?.split(' ')[0] || 'amigo';

  await chat.sendStateTyping();
  await delay(800);
  await chat.sendMessage(
    `Ol√° ${nome}, bem-vindo ao CT Jhonny Alves! ü§ñ\n` +
    `Serei seu assistente virtual. Se quiser ver o menu novamente, digite *menu*.\n\n` +
    `1 ‚Äì Conhecer o CT\n` +
    `2 ‚Äì Aula experimental\n` +
    `3 ‚Äì Planos\n` +
    `4 ‚Äì Hor√°rios\n` +
    `5 ‚Äì Pagamentos\n` +
    `0 ‚Äì Encerrar atendimento`
  );
}

async function sendMenu(msg: Message): Promise<void> {
  const chat: Chat = await msg.getChat();
  await chat.sendMessage(
    `Menu:\n` +
    `1 ‚Äì Conhecer o CT\n` +
    `2 ‚Äì Aula experimental\n` +
    `3 ‚Äì Planos\n` +
    `4 ‚Äì Hor√°rios\n` +
    `5 ‚Äì Pagamentos\n` +
    `0 ‚Äì Encerrar atendimento`
  );
}

// ---------- MENU ----------
async function handleMenuOption(msg: Message, option: string): Promise<void> {
  const chat: Chat = await msg.getChat();
  const chatId = msg.from;

  switch (option) {
    case '1': {
      const resposta =
        `*Modalidades do CT*:\n- Muay Thai, Boxe, Jiu Jitsu, Capoeira, Treino Funcional\n` +
        `*Unidades*:\n‚Ä¢ Saraiva: Rua Tapaj√≥s, 767\n‚Ä¢ Santa M√¥nica: Rua Jos√© Carrijo, 195\n` +
        `Atendemos todos os n√≠veis: iniciantes a competidores profissionais.\n\n` +
        `Se quiser ver as op√ß√µes novamente √© s√≥ digitar *menu* üòâ`;
      await chat.sendMessage(resposta);
      chatState.set(chatId, 'normal');
      break;
    }

    case '2': {
      const resposta =
        `*Aula Experimental*:\nPerfeito! üòÉ\n` +
        `Quando ficaria melhor pra voc√™?\n` +
        `Pra te ajudar, vou te mandar a planilha de hor√°rios, s√≥ um instante.\n\n` +
        `Se quiser voltar ao menu √© s√≥ digitar *menu* üòâ`;
      await chat.sendMessage(resposta);
      await sendHorarios(chat);
      await chat.markUnread();

      chatState.set(chatId, 'normal');
      break;
    }

    case '3': {
      const resposta =
        `*Planos Dispon√≠veis*:\n- Iniciante (R$99,00): 1 aula/semana\n` +
        `- Lutador (R$150,00): at√© 3 aulas/semana + descontos\n` +
        `- Campe√£o (R$260,00): ilimitado + 1 personal/m√™s + descontos familiares\n` +
        `- Universit√°rio (R$79,90): 4 aulas/semana + descontos (exclusivo UFU)\n\n` +
        `Me conta *qual plano* te agrada mais (pode escrever o nome).\n\n` +
        `Se quiser ver as op√ß√µes novamente √© s√≥ digitar *menu* üòâ`;
      await chat.sendMessage(resposta);
      chatState.set(chatId, 'aguardando_plano');
      break;
    }

    case '4': {
      await sendHorarios(chat);
      chatState.set(chatId, 'normal');
      break;
    }

    case '5': {
      await chat.sendMessage(PAGAMENTOS);
      chatState.set(chatId, 'normal');
      break;
    }

    case '0': {
      await chat.sendMessage('Encerrando atendimento. Se precisar de algo mais, digite *menu*.');
      chatState.set(chatId, 'normal');
      break;
    }
  }
}

// ---------- START ----------
client.initialize();
